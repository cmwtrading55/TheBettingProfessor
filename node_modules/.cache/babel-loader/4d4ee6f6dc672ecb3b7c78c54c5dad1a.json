{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CMW1\\\\Downloads\\\\betting-tips-app\\\\src\\\\components\\\\CumulativeGraph.js\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nfunction CumulativeGraph({\n  data\n}) {\n  // Function to safely parse float values after removing commas\n  const parseNumber = value => parseFloat(value.toString().replace(/,/g, ''));\n\n  // Extract relevant data from the columns\n  const cumulativePLData = data.map(row => parseNumber(row[11])); // Column L: Cumulative P/L\n  const cumulativeStakeData = data.map(row => parseNumber(row[12])); // Column M: Cumulative Stake\n  const betDetails = data.map(row => row[5]); // Column F: Bet details\n\n  // Filter out invalid data points\n  const filteredData = cumulativePLData.map((value, index) => ({\n    pl: value,\n    stake: cumulativeStakeData[index],\n    betDetail: betDetails[index]\n  })).filter(item => {\n    const isValid = !isNaN(item.pl) && !isNaN(item.stake) && item.stake >= 0;\n    console.log(`P/L = ${item.pl}, Stake = ${item.stake}, Valid = ${isValid}`);\n    return isValid;\n  });\n\n  // Log the final filtered data\n  console.log('Filtered Data:', filteredData);\n\n  // Find maximum cumulative stake value\n  const maxStake = Math.max(...filteredData.map(item => item.stake));\n\n  // Prepare data for chart\n  const chartData = {\n    labels: filteredData.map(item => item.stake),\n    // X-axis labels as cumulative stake values\n    datasets: [{\n      label: 'Cumulative P/L',\n      data: filteredData.map(item => item.pl),\n      fill: false,\n      backgroundColor: 'rgb(75, 192, 192)',\n      borderColor: 'rgba(75, 192, 192, 0.2)',\n      borderWidth: 2 // Make line thicker\n    }]\n  };\n\n  // Chart options with custom tooltip and bolder y=0 gridline\n  const options = {\n    scales: {\n      x: {\n        type: 'linear',\n        title: {\n          display: true,\n          text: 'Cumulative Stake'\n        },\n        min: 0,\n        // Set the minimum x-axis value to 0\n        max: maxStake // Dynamically set maximum x-axis value based on data\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Cumulative P/L'\n        },\n        grid: {\n          color: context => context.tick.value === 0 ? '#000' : '#ccc',\n          // Bolder line at y=0\n          lineWidth: context => context.tick.value === 0 ? 2 : 1 // Thicker line at y=0\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        callbacks: {\n          // Custom tooltip content\n          label: tooltipItem => {\n            const item = filteredData[tooltipItem.dataIndex];\n            return [`${item.betDetail}`, `Cumulative P/L: ${item.pl.toFixed(2)}`];\n          }\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"Cumulative P/L vs Cumulative Stake\"), /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }));\n}\nexport default CumulativeGraph;","map":{"version":3,"names":["React","Line","CumulativeGraph","data","parseNumber","value","parseFloat","toString","replace","cumulativePLData","map","row","cumulativeStakeData","betDetails","filteredData","index","pl","stake","betDetail","filter","item","isValid","isNaN","console","log","maxStake","Math","max","chartData","labels","datasets","label","fill","backgroundColor","borderColor","borderWidth","options","scales","x","type","title","display","text","min","y","grid","color","context","tick","lineWidth","plugins","tooltip","callbacks","tooltipItem","dataIndex","toFixed","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/CMW1/Downloads/betting-tips-app/src/components/CumulativeGraph.js"],"sourcesContent":["import React from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nfunction CumulativeGraph({ data }) {\r\n  // Function to safely parse float values after removing commas\r\n  const parseNumber = (value) => parseFloat(value.toString().replace(/,/g, ''));\r\n\r\n  // Extract relevant data from the columns\r\n  const cumulativePLData = data.map((row) => parseNumber(row[11])); // Column L: Cumulative P/L\r\n  const cumulativeStakeData = data.map((row) => parseNumber(row[12])); // Column M: Cumulative Stake\r\n  const betDetails = data.map((row) => row[5]); // Column F: Bet details\r\n\r\n  // Filter out invalid data points\r\n  const filteredData = cumulativePLData\r\n    .map((value, index) => ({\r\n      pl: value,\r\n      stake: cumulativeStakeData[index],\r\n      betDetail: betDetails[index],\r\n    }))\r\n    .filter((item) => {\r\n      const isValid = !isNaN(item.pl) && !isNaN(item.stake) && item.stake >= 0;\r\n      console.log(`P/L = ${item.pl}, Stake = ${item.stake}, Valid = ${isValid}`);\r\n      return isValid;\r\n    });\r\n\r\n  // Log the final filtered data\r\n  console.log('Filtered Data:', filteredData);\r\n\r\n  // Find maximum cumulative stake value\r\n  const maxStake = Math.max(...filteredData.map((item) => item.stake));\r\n\r\n  // Prepare data for chart\r\n  const chartData = {\r\n    labels: filteredData.map((item) => item.stake), // X-axis labels as cumulative stake values\r\n    datasets: [\r\n      {\r\n        label: 'Cumulative P/L',\r\n        data: filteredData.map((item) => item.pl),\r\n        fill: false,\r\n        backgroundColor: 'rgb(75, 192, 192)',\r\n        borderColor: 'rgba(75, 192, 192, 0.2)',\r\n        borderWidth: 2, // Make line thicker\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart options with custom tooltip and bolder y=0 gridline\r\n  const options = {\r\n    scales: {\r\n      x: {\r\n        type: 'linear',\r\n        title: {\r\n          display: true,\r\n          text: 'Cumulative Stake',\r\n        },\r\n        min: 0, // Set the minimum x-axis value to 0\r\n        max: maxStake, // Dynamically set maximum x-axis value based on data\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Cumulative P/L',\r\n        },\r\n        grid: {\r\n          color: (context) => (context.tick.value === 0 ? '#000' : '#ccc'), // Bolder line at y=0\r\n          lineWidth: (context) => (context.tick.value === 0 ? 2 : 1), // Thicker line at y=0\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        callbacks: {\r\n          // Custom tooltip content\r\n          label: (tooltipItem) => {\r\n            const item = filteredData[tooltipItem.dataIndex];\r\n            return [`${item.betDetail}`, `Cumulative P/L: ${item.pl.toFixed(2)}`];\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Cumulative P/L vs Cumulative Stake</h2>\r\n      <Line data={chartData} options={options} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CumulativeGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}