{"ast":null,"code":"import axios from 'axios';\n\n// Google Sheets API constants\nconst SHEET_ID = '1aj-xt9lKz8tux2LhaHjVDhjCT3TKlaf1xdoOjLKJxtU'; // Your Google Sheet ID\nconst API_KEY = 'AIzaSyCpQeGu5ttgs7nRF6bgTfK08CssTjkOAYI'; // Your Google Sheets API key\nconst RANGE = 'Betting%20Tips!A:AN'; // The dynamic range covering all rows in columns A to AN\n\n// Sports Live Scores API constants (commented out)\n/*\nconst RAPIDAPI_HOST = 'sports-live-scores.p.rapidapi.com';\nconst RAPIDAPI_KEY = '276a8c0736mshf09375fb00da8bap1572e3jsn0fb6089294a2';\nconst BASE_URL = 'https://sports-live-scores.p.rapidapi.com';\n*/\n\n/**\n * Fetch data from Google Sheets\n * @returns {Array} - An array of rows from the Google Sheet\n */\nexport const fetchData = async () => {\n  const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`;\n  console.log('Fetching URL:', url);\n  try {\n    const response = await axios.get(url);\n    console.log('API Response:', response);\n    console.log('Data Values:', response.data.values);\n    return response.data.values;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\n\n/**\n * Fetch live football events from Sports Live Scores API (commented out)\n */\n/*\nexport const fetchLiveFootballEvents = async () => {\n  const url = `${BASE_URL}/football/live_matches`;\n  console.log('Fetching Live Football Events URL:', url);\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        'x-rapidapi-host': RAPIDAPI_HOST,\n        'x-rapidapi-key': RAPIDAPI_KEY,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    console.log('Live Football Events API Response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching live football events:', error);\n    return [];\n  }\n};\n*/\n\n/**\n * Fetch odds for a specific event by Event ID (commented out)\n */\n/*\nexport const fetchEventOdds = async (eventId) => {\n  const url = `${BASE_URL}/get_odds/${eventId}`;\n  console.log(`Fetching Odds for Event ID ${eventId}:`, url);\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        'x-rapidapi-host': RAPIDAPI_HOST,\n        'x-rapidapi-key': RAPIDAPI_KEY,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    console.log(`Odds API Response for Event ID ${eventId}:`, response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching odds for event ID ${eventId}:`, error);\n    return null;\n  }\n};\n*/\n\n/**\n * Map custom event IDs to Sports Live Scores event IDs (commented out)\n */\n/*\nexport const mapEventsToCustomIDs = (customEvents, liveEvents) => {\n  return customEvents.map((customEvent) => {\n    const [date, , , sport, team1, team2] = customEvent; // Extract relevant fields (adjust based on your data structure)\n\n    // Try to find a matching live event based on date, sport, and teams\n    const matchingEvent = liveEvents.find((liveEvent) => {\n      // Extract relevant data from live event\n      const liveDate = new Date(liveEvent[\"Date\"]).toLocaleDateString('en-GB'); // Convert to 'dd/mm/yyyy' format\n      const liveSport = liveEvent[\"Sport\"]; // Assuming live events include sport info\n      const liveTeam1 = liveEvent[\"Team 1\"].toLowerCase();\n      const liveTeam2 = liveEvent[\"Team 2\"].toLowerCase();\n\n      // Compare sport, date, and team names (case-insensitive)\n      return (\n        sport.toLowerCase() === liveSport.toLowerCase() &&\n        date === liveDate &&\n        (team1.toLowerCase() === liveTeam1 || team1.toLowerCase() === liveTeam2) &&\n        (team2.toLowerCase() === liveTeam1 || team2.toLowerCase() === liveTeam2)\n      );\n    });\n\n    // If a matching event is found, add the live event ID to the custom event data\n    if (matchingEvent) {\n      return { ...customEvent, liveEventId: matchingEvent[\"Match Id\"] };\n    }\n\n    // Return the custom event as-is if no matching live event is found\n    return { ...customEvent, liveEventId: null };\n  });\n};\n*/\n\n/**\n * Log mapped events to the console for testing (commented out)\n */\n/*\nexport const logMappedEvents = async () => {\n  const customEvents = await fetchData(); // Fetch your custom events data\n  const liveEvents = await fetchLiveFootballEvents(); // Fetch live football events\n  const mappedEvents = mapEventsToCustomIDs(customEvents, liveEvents); // Map the custom events to live events\n  console.log('Mapped Events:', mappedEvents); // Log the mapped events to the console\n};\n*/","map":{"version":3,"names":["axios","SHEET_ID","API_KEY","RANGE","fetchData","url","console","log","response","get","data","values","error"],"sources":["C:/Users/CMW1/Downloads/betting-tips-app/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Google Sheets API constants\nconst SHEET_ID = '1aj-xt9lKz8tux2LhaHjVDhjCT3TKlaf1xdoOjLKJxtU'; // Your Google Sheet ID\nconst API_KEY = 'AIzaSyCpQeGu5ttgs7nRF6bgTfK08CssTjkOAYI'; // Your Google Sheets API key\nconst RANGE = 'Betting%20Tips!A:AN'; // The dynamic range covering all rows in columns A to AN\n\n// Sports Live Scores API constants (commented out)\n/*\nconst RAPIDAPI_HOST = 'sports-live-scores.p.rapidapi.com';\nconst RAPIDAPI_KEY = '276a8c0736mshf09375fb00da8bap1572e3jsn0fb6089294a2';\nconst BASE_URL = 'https://sports-live-scores.p.rapidapi.com';\n*/\n\n/**\n * Fetch data from Google Sheets\n * @returns {Array} - An array of rows from the Google Sheet\n */\nexport const fetchData = async () => {\n  const url = `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`;\n  console.log('Fetching URL:', url);\n\n  try {\n    const response = await axios.get(url);\n    console.log('API Response:', response);\n    console.log('Data Values:', response.data.values);\n    return response.data.values;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\n\n/**\n * Fetch live football events from Sports Live Scores API (commented out)\n */\n/*\nexport const fetchLiveFootballEvents = async () => {\n  const url = `${BASE_URL}/football/live_matches`;\n  console.log('Fetching Live Football Events URL:', url);\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        'x-rapidapi-host': RAPIDAPI_HOST,\n        'x-rapidapi-key': RAPIDAPI_KEY,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    console.log('Live Football Events API Response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching live football events:', error);\n    return [];\n  }\n};\n*/\n\n/**\n * Fetch odds for a specific event by Event ID (commented out)\n */\n/*\nexport const fetchEventOdds = async (eventId) => {\n  const url = `${BASE_URL}/get_odds/${eventId}`;\n  console.log(`Fetching Odds for Event ID ${eventId}:`, url);\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        'x-rapidapi-host': RAPIDAPI_HOST,\n        'x-rapidapi-key': RAPIDAPI_KEY,\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n    });\n    console.log(`Odds API Response for Event ID ${eventId}:`, response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Error fetching odds for event ID ${eventId}:`, error);\n    return null;\n  }\n};\n*/\n\n/**\n * Map custom event IDs to Sports Live Scores event IDs (commented out)\n */\n/*\nexport const mapEventsToCustomIDs = (customEvents, liveEvents) => {\n  return customEvents.map((customEvent) => {\n    const [date, , , sport, team1, team2] = customEvent; // Extract relevant fields (adjust based on your data structure)\n\n    // Try to find a matching live event based on date, sport, and teams\n    const matchingEvent = liveEvents.find((liveEvent) => {\n      // Extract relevant data from live event\n      const liveDate = new Date(liveEvent[\"Date\"]).toLocaleDateString('en-GB'); // Convert to 'dd/mm/yyyy' format\n      const liveSport = liveEvent[\"Sport\"]; // Assuming live events include sport info\n      const liveTeam1 = liveEvent[\"Team 1\"].toLowerCase();\n      const liveTeam2 = liveEvent[\"Team 2\"].toLowerCase();\n\n      // Compare sport, date, and team names (case-insensitive)\n      return (\n        sport.toLowerCase() === liveSport.toLowerCase() &&\n        date === liveDate &&\n        (team1.toLowerCase() === liveTeam1 || team1.toLowerCase() === liveTeam2) &&\n        (team2.toLowerCase() === liveTeam1 || team2.toLowerCase() === liveTeam2)\n      );\n    });\n\n    // If a matching event is found, add the live event ID to the custom event data\n    if (matchingEvent) {\n      return { ...customEvent, liveEventId: matchingEvent[\"Match Id\"] };\n    }\n\n    // Return the custom event as-is if no matching live event is found\n    return { ...customEvent, liveEventId: null };\n  });\n};\n*/\n\n/**\n * Log mapped events to the console for testing (commented out)\n */\n/*\nexport const logMappedEvents = async () => {\n  const customEvents = await fetchData(); // Fetch your custom events data\n  const liveEvents = await fetchLiveFootballEvents(); // Fetch live football events\n  const mappedEvents = mapEventsToCustomIDs(customEvents, liveEvents); // Map the custom events to live events\n  console.log('Mapped Events:', mappedEvents); // Log the mapped events to the console\n};\n*/\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,QAAQ,GAAG,8CAA8C,CAAC,CAAC;AACjE,MAAMC,OAAO,GAAG,yCAAyC,CAAC,CAAC;AAC3D,MAAMC,KAAK,GAAG,qBAAqB,CAAC,CAAC;;AAErC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;EACnC,MAAMC,GAAG,GAAG,iDAAiDJ,QAAQ,WAAWE,KAAK,QAAQD,OAAO,EAAE;EACtGI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,GAAG,CAAC;EAEjC,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACJ,GAAG,CAAC;IACrCC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAAC;IACtCF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,QAAQ,CAACE,IAAI,CAACC,MAAM,CAAC;IACjD,OAAOH,QAAQ,CAACE,IAAI,CAACC,MAAM;EAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}