{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CMW1\\\\Downloads\\\\betting-tips-app\\\\src\\\\components\\\\ProfitLossGraph.js\";\nimport React, { useState, useMemo } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport 'chart.js/auto';\nfunction ProfitLossGraph({\n  data\n}) {\n  // Function to safely parse float values after removing commas\n  const parseNumber = value => parseFloat(value.toString().replace(/,/g, ''));\n\n  // State to keep track of the selected sport filter\n  const [selectedSport, setSelectedSport] = useState('All');\n\n  // Extract unique sports for the dropdown filter\n  const sportsOptions = useMemo(() => {\n    const sports = data.map(row => row[3]); // Assuming sport is in column 3\n    return ['All', ...new Set(sports)];\n  }, [data]);\n\n  // Filter and process data based on selected sport\n  const filteredData = useMemo(() => {\n    let filtered = data;\n    if (selectedSport !== 'All') {\n      filtered = data.filter(row => row[3] === selectedSport); // Filter by sport\n    }\n\n    // Calculate cumulative stake and P/L\n    let cumulativePL = 0;\n    let cumulativeStake = 0;\n    return filtered.map(row => {\n      cumulativePL += parseNumber(row[10]); // Assuming column K (index 10) is the P/L\n      cumulativeStake += parseNumber(row[2]); // Assuming column C (index 2) is the Stake\n      return {\n        pl: cumulativePL,\n        stake: cumulativeStake,\n        matchDetail: row[4] // Column F for match details\n      };\n    });\n  }, [data, selectedSport]);\n\n  // Prepare data for chart\n  const chartData = {\n    labels: filteredData.map(item => item.stake),\n    // X-axis labels as cumulative stake values\n    datasets: [{\n      label: 'Cumulative P/L',\n      data: filteredData.map(item => item.pl),\n      fill: {\n        target: 'origin',\n        above: 'rgba(75, 192, 192, 0.3)',\n        // Gradient fill color above the line\n        below: 'rgba(255, 99, 132, 0.3)' // Gradient fill color below the line\n      },\n      backgroundColor: 'rgb(75, 192, 192)',\n      borderColor: 'rgba(75, 192, 192, 0.8)',\n      borderWidth: 3,\n      // Make line thicker\n      pointRadius: 4,\n      // Size of points on the line\n      pointBackgroundColor: 'rgb(75, 192, 192)' // Point color\n    }]\n  };\n\n  // Chart options with custom tooltip and bolder y=0 gridline\n  const options = {\n    scales: {\n      x: {\n        type: 'linear',\n        title: {\n          display: true,\n          text: 'Cumulative Stake',\n          font: {\n            size: 16,\n            weight: 'bold'\n          }\n        },\n        min: 0,\n        grid: {\n          borderDash: [8, 4],\n          // Dashed grid lines\n          color: '#ddd'\n        }\n      },\n      y: {\n        title: {\n          display: true,\n          text: 'Cumulative P/L',\n          font: {\n            size: 16,\n            weight: 'bold'\n          }\n        },\n        grid: {\n          color: context => context.tick.value === 0 ? '#000' : '#ccc',\n          // Bolder line at y=0\n          lineWidth: context => context.tick.value === 0 ? 2 : 1,\n          // Thicker line at y=0\n          borderDash: [8, 4] // Dashed grid lines\n        }\n      }\n    },\n    plugins: {\n      tooltip: {\n        backgroundColor: 'rgba(0,0,0,0.7)',\n        // Dark tooltip background\n        titleFont: {\n          size: 14,\n          weight: 'bold'\n        },\n        bodyFont: {\n          size: 12\n        },\n        boxPadding: 10,\n        cornerRadius: 4,\n        borderWidth: 1,\n        borderColor: '#ccc',\n        callbacks: {\n          // Custom tooltip content\n          label: tooltipItem => {\n            const item = filteredData[tooltipItem.dataIndex];\n            return [`${item.matchDetail}`, `Cumulative P/L: ${item.pl.toFixed(2)}`];\n          }\n        }\n      },\n      legend: {\n        position: 'bottom',\n        labels: {\n          font: {\n            size: 14\n          },\n          padding: 20\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '20px',\n      backgroundColor: '#fafafa',\n      borderRadius: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    style: {\n      textAlign: 'center',\n      color: '#333'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }\n  }, \"Profit & Loss vs Cumulative Stake\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      textAlign: 'center',\n      marginBottom: '20px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 9\n    }\n  }, \"Filter by Sport:\", ' ', /*#__PURE__*/React.createElement(\"select\", {\n    value: selectedSport,\n    onChange: e => setSelectedSport(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, sportsOptions.map((sport, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: sport,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 15\n    }\n  }, sport))))), /*#__PURE__*/React.createElement(Line, {\n    data: chartData,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }));\n}\nexport default ProfitLossGraph;","map":{"version":3,"names":["React","useState","useMemo","Line","ProfitLossGraph","data","parseNumber","value","parseFloat","toString","replace","selectedSport","setSelectedSport","sportsOptions","sports","map","row","Set","filteredData","filtered","filter","cumulativePL","cumulativeStake","pl","stake","matchDetail","chartData","labels","item","datasets","label","fill","target","above","below","backgroundColor","borderColor","borderWidth","pointRadius","pointBackgroundColor","options","scales","x","type","title","display","text","font","size","weight","min","grid","borderDash","color","y","context","tick","lineWidth","plugins","tooltip","titleFont","bodyFont","boxPadding","cornerRadius","callbacks","tooltipItem","dataIndex","toFixed","legend","position","padding","createElement","style","borderRadius","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","marginBottom","onChange","e","sport","index","key"],"sources":["C:/Users/CMW1/Downloads/betting-tips-app/src/components/ProfitLossGraph.js"],"sourcesContent":["import React, { useState, useMemo } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport 'chart.js/auto';\r\n\r\nfunction ProfitLossGraph({ data }) {\r\n  // Function to safely parse float values after removing commas\r\n  const parseNumber = (value) => parseFloat(value.toString().replace(/,/g, ''));\r\n\r\n  // State to keep track of the selected sport filter\r\n  const [selectedSport, setSelectedSport] = useState('All');\r\n\r\n  // Extract unique sports for the dropdown filter\r\n  const sportsOptions = useMemo(() => {\r\n    const sports = data.map((row) => row[3]); // Assuming sport is in column 3\r\n    return ['All', ...new Set(sports)];\r\n  }, [data]);\r\n\r\n  // Filter and process data based on selected sport\r\n  const filteredData = useMemo(() => {\r\n    let filtered = data;\r\n\r\n    if (selectedSport !== 'All') {\r\n      filtered = data.filter((row) => row[3] === selectedSport); // Filter by sport\r\n    }\r\n\r\n    // Calculate cumulative stake and P/L\r\n    let cumulativePL = 0;\r\n    let cumulativeStake = 0;\r\n    return filtered.map((row) => {\r\n      cumulativePL += parseNumber(row[10]); // Assuming column K (index 10) is the P/L\r\n      cumulativeStake += parseNumber(row[2]); // Assuming column C (index 2) is the Stake\r\n      return {\r\n        pl: cumulativePL,\r\n        stake: cumulativeStake,\r\n        matchDetail: row[4], // Column F for match details\r\n      };\r\n    });\r\n  }, [data, selectedSport]);\r\n\r\n  // Prepare data for chart\r\n  const chartData = {\r\n    labels: filteredData.map((item) => item.stake), // X-axis labels as cumulative stake values\r\n    datasets: [\r\n      {\r\n        label: 'Cumulative P/L',\r\n        data: filteredData.map((item) => item.pl),\r\n        fill: {\r\n          target: 'origin',\r\n          above: 'rgba(75, 192, 192, 0.3)', // Gradient fill color above the line\r\n          below: 'rgba(255, 99, 132, 0.3)', // Gradient fill color below the line\r\n        },\r\n        backgroundColor: 'rgb(75, 192, 192)',\r\n        borderColor: 'rgba(75, 192, 192, 0.8)',\r\n        borderWidth: 3, // Make line thicker\r\n        pointRadius: 4, // Size of points on the line\r\n        pointBackgroundColor: 'rgb(75, 192, 192)', // Point color\r\n      },\r\n    ],\r\n  };\r\n\r\n  // Chart options with custom tooltip and bolder y=0 gridline\r\n  const options = {\r\n    scales: {\r\n      x: {\r\n        type: 'linear',\r\n        title: {\r\n          display: true,\r\n          text: 'Cumulative Stake',\r\n          font: {\r\n            size: 16,\r\n            weight: 'bold',\r\n          },\r\n        },\r\n        min: 0,\r\n        grid: {\r\n          borderDash: [8, 4], // Dashed grid lines\r\n          color: '#ddd',\r\n        },\r\n      },\r\n      y: {\r\n        title: {\r\n          display: true,\r\n          text: 'Cumulative P/L',\r\n          font: {\r\n            size: 16,\r\n            weight: 'bold',\r\n          },\r\n        },\r\n        grid: {\r\n          color: (context) => (context.tick.value === 0 ? '#000' : '#ccc'), // Bolder line at y=0\r\n          lineWidth: (context) => (context.tick.value === 0 ? 2 : 1), // Thicker line at y=0\r\n          borderDash: [8, 4], // Dashed grid lines\r\n        },\r\n      },\r\n    },\r\n    plugins: {\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0,0,0,0.7)', // Dark tooltip background\r\n        titleFont: {\r\n          size: 14,\r\n          weight: 'bold',\r\n        },\r\n        bodyFont: {\r\n          size: 12,\r\n        },\r\n        boxPadding: 10,\r\n        cornerRadius: 4,\r\n        borderWidth: 1,\r\n        borderColor: '#ccc',\r\n        callbacks: {\r\n          // Custom tooltip content\r\n          label: (tooltipItem) => {\r\n            const item = filteredData[tooltipItem.dataIndex];\r\n            return [`${item.matchDetail}`, `Cumulative P/L: ${item.pl.toFixed(2)}`];\r\n          },\r\n        },\r\n      },\r\n      legend: {\r\n        position: 'bottom',\r\n        labels: {\r\n          font: {\r\n            size: 14,\r\n          },\r\n          padding: 20,\r\n        },\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px', backgroundColor: '#fafafa', borderRadius: '8px' }}>\r\n      <h2 style={{ textAlign: 'center', color: '#333' }}>Profit & Loss vs Cumulative Stake</h2>\r\n      {/* Sport Filter Dropdown */}\r\n      <div style={{ textAlign: 'center', marginBottom: '20px' }}>\r\n        <label>\r\n          Filter by Sport:{' '}\r\n          <select value={selectedSport} onChange={(e) => setSelectedSport(e.target.value)}>\r\n            {sportsOptions.map((sport, index) => (\r\n              <option key={index} value={sport}>\r\n                {sport}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </label>\r\n      </div>\r\n      <Line data={chartData} options={options} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProfitLossGraph;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}